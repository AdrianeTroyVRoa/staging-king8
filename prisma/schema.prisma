// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//model Post {
//  id        Int      @id @default(autoincrement())
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  title     String   @db.VarChar(255)
//  content   String?
//  published Boolean  @default(false)
//  author    User     @relation(fields: [authorId], references: [id])
//  authorId  Int
//}
//
//model Profile {
//  id     Int     @id @default(autoincrement())
//  bio    String?
//  user   User    @relation(fields: [userId], references: [id])
//  userId Int     @unique
//}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  mobile_num String      @unique @db.VarChar(10)
  first_name String
  last_name  String
  password   String?
  role       Role
  isVerified Boolean     @default(false)
  ///posts   Post[]
  ///profile Profile?
  Wishlist   Wishlist[]
  Inquiries  Inquiries[]
}

enum Role {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  num_left    Int
  description String
  image_src   String
  Wishlist    Wishlist[]
  Inquiries   Inquiries[]
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  user_id    User     @relation(fields: [userId], references: [id])
  product_id Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  productId  Int
}

model Inquiries {
  id             Int      @id @default(autoincrement())
  user_id        User     @relation(fields: [userId], references: [id])
  product_id     Product  @relation(fields: [productId], references: [id])
  inquiredAt     DateTime @default(now())
  additional_msg String?
  status         Status
  userId         Int
  productId      Int
}

enum Status {
  PENDING
  RESOLVED
}
